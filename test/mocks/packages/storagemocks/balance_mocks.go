// Code generated by MockGen. DO NOT EDIT.
// Source: ../../storage/repository/balance.go

// Package storagemocks is a generated GoMock package.
package storagemocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	repository "yandex-diplom/storage/repository"
)

// MockBalance is a mock of Balance interface
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockBalance) GetBalance(login string) (*repository.BalanceCurrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", login)
	ret0, _ := ret[0].(*repository.BalanceCurrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockBalanceMockRecorder) GetBalance(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalance)(nil).GetBalance), login)
}

// SetBalanceWithdraw mocks base method
func (m *MockBalance) SetBalanceWithdraw(withdraw *repository.BalanceWithdraw, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalanceWithdraw", withdraw, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalanceWithdraw indicates an expected call of SetBalanceWithdraw
func (mr *MockBalanceMockRecorder) SetBalanceWithdraw(withdraw, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalanceWithdraw", reflect.TypeOf((*MockBalance)(nil).SetBalanceWithdraw), withdraw, login)
}

// GetBalanceWithdraw mocks base method
func (m *MockBalance) GetBalanceWithdraw(login string) (*repository.BalanceWithdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceWithdraw", login)
	ret0, _ := ret[0].(*repository.BalanceWithdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceWithdraw indicates an expected call of GetBalanceWithdraw
func (mr *MockBalanceMockRecorder) GetBalanceWithdraw(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceWithdraw", reflect.TypeOf((*MockBalance)(nil).GetBalanceWithdraw), login)
}

// SetAccrual mocks base method
func (m *MockBalance) SetAccrual(accrualOrders []repository.OrderAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccrual", accrualOrders)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccrual indicates an expected call of SetAccrual
func (mr *MockBalanceMockRecorder) SetAccrual(accrualOrders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccrual", reflect.TypeOf((*MockBalance)(nil).SetAccrual), accrualOrders)
}
