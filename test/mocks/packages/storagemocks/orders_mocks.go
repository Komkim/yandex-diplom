// Code generated by MockGen. DO NOT EDIT.
// Source: ../../storage/repository/orders.go

// Package storagemocks is a generated GoMock package.
package storagemocks

import (
	reflect "reflect"
	repository "yandex-diplom/storage/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockOrders is a mock of Orders interface
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// SetOrderNumber mocks base method
func (m *MockOrders) SetOrderNumber(number int64, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderNumber", number, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrderNumber indicates an expected call of SetOrderNumber
func (mr *MockOrdersMockRecorder) SetOrderNumber(number, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderNumber", reflect.TypeOf((*MockOrders)(nil).SetOrderNumber), number, login)
}

// GetOrders mocks base method
func (m *MockOrders) GetOrders(login string) ([]repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", login)
	ret0, _ := ret[0].([]repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders
func (mr *MockOrdersMockRecorder) GetOrders(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrders)(nil).GetOrders), login)
}

// GetOrderWithdrawals mocks base method
func (m *MockOrders) GetOrderWithdrawals(login string) ([]repository.OrderWithdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithdrawals", login)
	ret0, _ := ret[0].([]repository.OrderWithdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithdrawals indicates an expected call of GetOrderWithdrawals
func (mr *MockOrdersMockRecorder) GetOrderWithdrawals(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithdrawals", reflect.TypeOf((*MockOrders)(nil).GetOrderWithdrawals), login)
}

// GetAccrualOrder mocks base method
func (m *MockOrders) GetAccrualOrder() ([]repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrualOrder")
	ret0, _ := ret[0].([]repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccrualOrder indicates an expected call of GetAccrualOrder
func (mr *MockOrdersMockRecorder) GetAccrualOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrualOrder", reflect.TypeOf((*MockOrders)(nil).GetAccrualOrder))
}
